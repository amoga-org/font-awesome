name: Publish Package

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Test imports
        run: pnpm test

      - name: Pack package
        run: |
          PACKAGE_NAME=$(pnpm pack)
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: |
            dist/
            ${{ env.PACKAGE_NAME }}
          if-no-files-found: error

  release-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          registry-url: "https://npm.pkg.github.com"
          scope: "@amoga-org"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-artifacts
          path: .

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "upload_url=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              | jq -r '.upload_url')" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create_release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.exists == 'true' && steps.check_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGE_NAME }}
          asset_name: ${{ env.PACKAGE_NAME }}
          asset_content_type: application/gzip

      - name: Publish to GitHub Packages
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
